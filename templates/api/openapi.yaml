openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
  description: |-
    Budget Tracker helps you to manage your personal and group expences.
  termsOfService: http://swagger.io/terms/
  contact:
    email: budgettrackerteam@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.server.test/v1
  - url: http://127.0.0.1:8000
  - url: http://127.0.0.1:5000
tags:
  - name: user
    description: Operations about user
  - name: group
    description: Operations about group

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_creation'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_fullinfo'
        '400':
          $ref: '#/components/responses/BadRequest'
  /user/login:
    get:
      tags: 
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user
      description: ''
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out.
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - accessToken:
          - read
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      description: ''
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: The username that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_personalinfo'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/user_personalinfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - accessToken:
          - read
    put:
      tags:
        - user
      summary: Update user
      description: 
        'This can only be done by the logged in user, only his own info.'
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: username that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_fullinfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user_fullinfo'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_fullinfo'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/user_fullinfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - write
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The username that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - write
  /group:
    post:
      tags:
        - group
      summary: Create group
      description: Can be done by logged in user, which get the ownership of the group
      operationId: createGroup
      requestBody:
        description: Create group object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupCreation'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/OK_group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - accessToken:
        - write
  /group/list:
    get:
      tags:
        - group
      summary: Get groups avaliable for user
      description: ''
      operationId: getUserGroups
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/groupGeneralInfo'    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - read
  /group/{group_id}:         
    get:
      tags:
        - group
      summary: Get group info
      description: Can be done by logged in group member
      operationId: getGroupInfo
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/groupInfo'
                  - properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/user_personalinfo'
                      purchases:
                        type: array
                        items:
                          $ref: '#/components/schemas/purchaseInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
      security:
      - accessToken:
        - read
    put:
      tags:
        - group
      summary: Update group name
      description: Can be done by logged in owner
      operationId: updateGroupName
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent group
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: template name
      responses:
        '200':
          $ref: '#/components/responses/OK_group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
      security:
      - accessToken:
        - read
        - write
    delete:
      tags:
        - group
      summary: Delete group
      description: Can be done by logged in owner or admin
      operationId: deleteGroup
      parameters:
        - name: group_id
          in: path
          description: The group id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully deleted group.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'  
      security:
      - accessToken:
        - read
  /group/{group_id}/send_invitation:
    post:
      tags:
        - group
      summary: Send invitation to a user
      description: 'Can be done by owner'
      operationId: addMemberGroup
      parameters:
        - name: user_id
          in: query
          description: User Id
          required: true
          schema:
            type: integer
            format: int64
        - name: group_id
          in: path
          description: The group id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  invitation_status:
                    type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - read
  /group/{group_id}/join:
    post:
      tags:
        - group
      summary: Join to an existing group
      description: ''
      operationId: joinGroup
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: secret_key
          in: query
          description: secret_key to enter the group
          required: true
          schema:
            type: string
            example: som3_unique_Pass_setByOWner123
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/responses/OK_purchase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - write
  /group/{group_id}/kick:
    delete:
      tags:
        - group
      summary: Kick the member out from group
      description: 'Can be done by owner'
      operationId: deleteGroupMember
      parameters:
        - name: group_id
          in: path
          description: The group id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: number
                example: 1
      responses:
        '200':
          description: Successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      - accessToken:
        - read
  /group/{group_id}/purchase/list:
    get:
      tags:
        - group
      summary: DEPRECATED Get purchases, where the logged in user can make transfers
      description: ''
      operationId: getUserPurchases
      parameters: 
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/purchaseInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
      - accessToken:
        - read
  /group/{group_id}/purchase:
    post:
      tags:
        - group
      summary: Create purchase
      description: Can be done by logged in group member
      operationId: createPurchase
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create purchase object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchaseCreation'
        required: true
      responses:
        '200':
          description: 'Successful creation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
      - accessToken:
        - read
    delete:
      tags:
        - group
      summary: Delete purchase
      description: Can be done by logged in owner or admin
      operationId: deletePurchase
      parameters:
        - name: group_id
          in: path
          description: The group id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: number
                  example: 1
      responses:
        '200':
          description: Successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound' 
      security:
      - accessToken:
        - read
  /group/{group_id}/purchase/{purchase_id}:         
    put:
      tags:
        - group
      summary: Update purchase
      description: Can be done by logged in owner
      operationId: updatePurchase
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: purchase_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: bike
                prica:
                  type: number
                  example: 99.9
      responses:
        '200':
          $ref: '#/components/responses/OK_purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'  
      security:
      - accessToken:
        - read
  /group/{group_id}/purchases/{purchase_id}/members:
    get:
      tags:
        - group
      summary: Get all users who can transfer money for this purchase
      description: ''
      operationId: getPurchaseMembersList
      parameters:
        - name: group_id
          in: path
          description: The group id.
          required: true
          schema:
            type: integer
            format: int64
        - name: purchase_id
          in: path
          description: The id of the purchase.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    user:
                      $ref: '#/components/schemas/user_personalinfo'
                    deposit:
                      type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'     
      security:
      - accessToken:
        - read
  /group/{group_id}/purchases/{purchase_id}/transfers:
    get:
      tags:
        - group
      summary: Get all money transfers for the purchase
      description: ''
      operationId: getTransfersList
      parameters:
        - name: group_id
          in: path
          description: The group id.
          required: true
          schema:
            type: integer
            format: int64
        - name: purchase_id
          in: path
          description: The id of the purchase.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transfer'          
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound' 
      security:
      - accessToken:
        - read
    post:
      tags: 
        - group
      summary: Make a transfer for the purchase
      description: ''
      operationId: makeTransfer
      parameters:
        - name: group_id
          in: path
          description: The group id.
          required: true
          schema:
            type: integer
            format: int64
        - name: purchase_id
          in: path
          description: The id of the purchase.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create transfer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferCreation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer'          
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound' 
      security:
      - accessToken:
        - read
    delete:
      tags: 
        - group
      summary: Delete a transfer from the purchase
      description: ''
      operationId: makeTransfer
      parameters:
        - name: group_id
          in: path
          description: The group id.
          required: true
          schema:
            type: integer
            format: int64
        - name: purchase_id
          in: path
          description: The id of the purchase.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create transfer object
        content:
          application/json:
            schema:
              type: array
              items:
                type: number
                example: 1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound' 
      security:
      - accessToken:
        - read
        
components:
  schemas:
    user_creation: 
      type: object
      properties:
        username:
          type: string
          example: batiukmaks3000
        password:
          type: string
          example: str0ng_Passw0ord
        first_name:
          type: string
          example: Maksym
        last_name:
          type: string
          example: Batiuk
        card_number:
          type: string
          example: 1234567812345678
        phone:
          type: string
          example: +380953702395
        email:
          type: string
          example: youremail@gmail.com
    token:
      type: object
      properties:
        accessToken:
          type: 'string'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        refreshToken:
          type: 'string'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    user_fullinfo: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: batiukmaks3000
        password:
          type: string
          example: str0ng_Passw0ord
        first_name:
          type: string
          example: Maksym
        last_name:
          type: string
          example: Batiuk
        card_number:
          type: string
          example: 1234567812345678
        phone:
          type: string
          example: +380953702395
        email:
          type: string
          example: youremail@gmail.com
    user_personalinfo: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: batiukmaks3000
        first_name:
          type: string
          example: Maksym
        last_name:
          type: string
          example: Batiuk
        phone:
          type: string
          example: +380953702395
        email:
          type: string
          example: youremail@gmail.com
    groupCreation:
      type: object
      properties:
        name:
          type: string
    groupGeneralInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/groupCreation'
        - properties:
            id:
              type: integer
              format: int64
              example: 34
            owner:
              $ref: '#/components/schemas/user_personalinfo'
    groupInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/groupGeneralInfo'
        - properties:
            name:
              type: string
            secret_key:
              type: string
              example: som3_unique_Pass_setByOWner123
    groupMember:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 13
        group_id:
          type: integer
          format: int64
          example: 34
        owner_id: 
          type: integer
          format: int64
          example: 34
        personal_info:
          $ref: '#/components/schemas/user_personalinfo'
    purchaseCreation:
      properties:
        name:
          type: string
          example: Fridge
        cost:
          type: number
          format: float        
    purchaseInfo:
      allOf:
        - $ref: '#/components/schemas/purchaseCreation'
        - properties:
            id:
              type: integer
              format: int64
              example: 34
            balance:
              description: this thing is calculated in backend
              type: integer
              format: int64
              example: 0 
    purchaseMember:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 13
        group_id:
          type: integer
          format: int64
          example: 29
        purchase_id: 
          type: integer
          format: int64
          example: 103
        personal_info:
          $ref: '#/components/schemas/user_personalinfo'
    transferCreation:
      properties:
        type:
          type: string
          example: 'TOP_UP'
        amount: 
          type: number
          format: float
          example: 320.5
    transfer:
      allOf:
        - $ref: '#/components/schemas/transferCreation'
        - properties:
            id:
              type: integer
              format: int64
              example: 23
            user:
              $ref: '#/components/schemas/user_personalinfo'
    transferInfo:
      allOf:
        - $ref: '#/components/schemas/transfer'
        - properties:
            purchase_id:
              type: integer
              format: int64
              example: 47
    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    OK_group:
      description: Successful operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/groupInfo'
    OK_purchase:
      description: Successful operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/purchaseInfo'
    BadRequest:
      description: Invalid input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Unauthorized:
      description: Unauthorized user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Forbidden:
      description: The user does not have the necessary permissions for the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    NotFound:
      description: The resourse is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  securitySchemes:
    accessToken:
      type: apiKey  
      in: header
      name: Authorization